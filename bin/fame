#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'commander'
require 'colorize'
require 'fame/version'
require 'fame/interface_builder'
require 'fame/xliff_import'
require 'fame/xliff_export'

#
# The Fame CLI
#
class FameApplication
  include Commander::Methods

  def run
    program :name, 'Fame'
    program :version, Fame::VERSION
    program :description, 'Delightful localization of .storyboard and .xib files, right within Interface Builder. The fame CLI exports .xliff files based on the settings provided in Interface Builder files.'
    default_command :export

    #
    # Import
    #
    command :import do |c|
      c.syntax = 'fame import --project /path/to/xcodeproj [options]'
      c.description = 'Imports all given .xliff files into the given Xcode project.'
      c.option '--project STRING', String, 'Path to an Xcode project that should be localized'
      c.option '--xliff-path STRING', String, 'Path to an .xliff file or a folder that contains .xliff files to be imported.'

      c.action do |args, options|
        options.default :xliff_path => '.'

        # Import .xliff files
        xliff = Fame::XliffImport.new(options.project)
        xliff.import(options.xliff_path)
      end
    end

    #
    # Export
    #
    command :export do |c|
      c.syntax = 'fame export --project /path/to/xcodeproj [options]'
      c.description = 'Exports all .xliff files for the current Xcode project based on the settings provided in the Interface Builder files (via Fame.swift).'
      c.option '--project STRING', String, 'Path to an Xcode project that should be localized'
      c.option '--ib-file-path STRING', String, 'Path to an interface builder file or a folder that contains interface builder files that should be localized.'
      c.option '--output-path STRING', String, 'Path to a folder where exported .xliff files should be placed.'

      c.action do |args, options|
        options.default :ib_file_path => '.'
        options.default :output_path => '.'

        ib_files = Fame::InterfaceBuilder.determine_ib_files!(options.ib_file_path)
        puts "Found #{ib_files.count} file(s) to localize".light_black

        # Collect IB nodes for each file
        ib_nodes = ib_files.inject([]) do |all, file|
          ib = Fame::InterfaceBuilder.new(file)
          all + ib.nodes
        end

        # Generate XLIFF translation files
        xliff = Fame::XliffExport.new(options.project)
        xliff.export(options.output_path, ib_nodes)
      end
    end

    run!
  end
end

# run application
FameApplication.new.run
